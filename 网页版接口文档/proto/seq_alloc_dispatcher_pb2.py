# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: seq_alloc_dispatcher.proto

from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


import header_pb2 as header__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='seq_alloc_dispatcher.proto',
  package='Proto',
  syntax='proto3',
  serialized_pb=b'\n\x1aseq_alloc_dispatcher.proto\x12\x05Proto\x1a\x0cheader.proto\"E\n\x16\x44ispatchCurSeqAllocReq\x12\x1e\n\x06header\x18\xf4\x03 \x01(\x0b\x32\r.Proto.Header\x12\x0b\n\x03uin\x18\x01 \x01(\r\"p\n\x16\x44ispatchCurSeqAllocRsp\x12\x1e\n\x06header\x18\xf4\x03 \x01(\x0b\x32\r.Proto.Header\x12\x0b\n\x03ret\x18\x01 \x01(\x05\x12\x0b\n\x03\x65rr\x18\x02 \x01(\t\x12\x0b\n\x03uin\x18\x03 \x01(\r\x12\x0f\n\x07\x63ur_seq\x18\x04 \x01(\x04\"E\n\x16\x44ispatchNewSeqAllocReq\x12\x1e\n\x06header\x18\xf4\x03 \x01(\x0b\x32\r.Proto.Header\x12\x0b\n\x03uin\x18\x01 \x01(\r\"p\n\x16\x44ispatchNewSeqAllocRsp\x12\x1e\n\x06header\x18\xf4\x03 \x01(\x0b\x32\r.Proto.Header\x12\x0b\n\x03ret\x18\x01 \x01(\x05\x12\x0b\n\x03\x65rr\x18\x02 \x01(\t\x12\x0b\n\x03uin\x18\x03 \x01(\r\x12\x0f\n\x07new_seq\x18\x04 \x01(\x04\x32\xc5\x01\n\x15RPCSeqAllocDispatcher\x12U\n\x13\x44ispatchCurSeqAlloc\x12\x1d.Proto.DispatchCurSeqAllocReq\x1a\x1d.Proto.DispatchCurSeqAllocRsp\"\x00\x12U\n\x13\x44ispatchNewSeqAlloc\x12\x1d.Proto.DispatchNewSeqAllocReq\x1a\x1d.Proto.DispatchNewSeqAllocRsp\"\x00\x62\x06proto3'
  ,
  dependencies=[header__pb2.DESCRIPTOR,])
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_DISPATCHCURSEQALLOCREQ = _descriptor.Descriptor(
  name='DispatchCurSeqAllocReq',
  full_name='Proto.DispatchCurSeqAllocReq',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='header', full_name='Proto.DispatchCurSeqAllocReq.header', index=0,
      number=500, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='uin', full_name='Proto.DispatchCurSeqAllocReq.uin', index=1,
      number=1, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=51,
  serialized_end=120,
)


_DISPATCHCURSEQALLOCRSP = _descriptor.Descriptor(
  name='DispatchCurSeqAllocRsp',
  full_name='Proto.DispatchCurSeqAllocRsp',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='header', full_name='Proto.DispatchCurSeqAllocRsp.header', index=0,
      number=500, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='ret', full_name='Proto.DispatchCurSeqAllocRsp.ret', index=1,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='err', full_name='Proto.DispatchCurSeqAllocRsp.err', index=2,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='uin', full_name='Proto.DispatchCurSeqAllocRsp.uin', index=3,
      number=3, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='cur_seq', full_name='Proto.DispatchCurSeqAllocRsp.cur_seq', index=4,
      number=4, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=122,
  serialized_end=234,
)


_DISPATCHNEWSEQALLOCREQ = _descriptor.Descriptor(
  name='DispatchNewSeqAllocReq',
  full_name='Proto.DispatchNewSeqAllocReq',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='header', full_name='Proto.DispatchNewSeqAllocReq.header', index=0,
      number=500, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='uin', full_name='Proto.DispatchNewSeqAllocReq.uin', index=1,
      number=1, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=236,
  serialized_end=305,
)


_DISPATCHNEWSEQALLOCRSP = _descriptor.Descriptor(
  name='DispatchNewSeqAllocRsp',
  full_name='Proto.DispatchNewSeqAllocRsp',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='header', full_name='Proto.DispatchNewSeqAllocRsp.header', index=0,
      number=500, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='ret', full_name='Proto.DispatchNewSeqAllocRsp.ret', index=1,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='err', full_name='Proto.DispatchNewSeqAllocRsp.err', index=2,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='uin', full_name='Proto.DispatchNewSeqAllocRsp.uin', index=3,
      number=3, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='new_seq', full_name='Proto.DispatchNewSeqAllocRsp.new_seq', index=4,
      number=4, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=307,
  serialized_end=419,
)

_DISPATCHCURSEQALLOCREQ.fields_by_name['header'].message_type = header__pb2._HEADER
_DISPATCHCURSEQALLOCRSP.fields_by_name['header'].message_type = header__pb2._HEADER
_DISPATCHNEWSEQALLOCREQ.fields_by_name['header'].message_type = header__pb2._HEADER
_DISPATCHNEWSEQALLOCRSP.fields_by_name['header'].message_type = header__pb2._HEADER
DESCRIPTOR.message_types_by_name['DispatchCurSeqAllocReq'] = _DISPATCHCURSEQALLOCREQ
DESCRIPTOR.message_types_by_name['DispatchCurSeqAllocRsp'] = _DISPATCHCURSEQALLOCRSP
DESCRIPTOR.message_types_by_name['DispatchNewSeqAllocReq'] = _DISPATCHNEWSEQALLOCREQ
DESCRIPTOR.message_types_by_name['DispatchNewSeqAllocRsp'] = _DISPATCHNEWSEQALLOCRSP

DispatchCurSeqAllocReq = _reflection.GeneratedProtocolMessageType('DispatchCurSeqAllocReq', (_message.Message,), dict(
  DESCRIPTOR = _DISPATCHCURSEQALLOCREQ,
  __module__ = 'seq_alloc_dispatcher_pb2'
  # @@protoc_insertion_point(class_scope:Proto.DispatchCurSeqAllocReq)
  ))
_sym_db.RegisterMessage(DispatchCurSeqAllocReq)

DispatchCurSeqAllocRsp = _reflection.GeneratedProtocolMessageType('DispatchCurSeqAllocRsp', (_message.Message,), dict(
  DESCRIPTOR = _DISPATCHCURSEQALLOCRSP,
  __module__ = 'seq_alloc_dispatcher_pb2'
  # @@protoc_insertion_point(class_scope:Proto.DispatchCurSeqAllocRsp)
  ))
_sym_db.RegisterMessage(DispatchCurSeqAllocRsp)

DispatchNewSeqAllocReq = _reflection.GeneratedProtocolMessageType('DispatchNewSeqAllocReq', (_message.Message,), dict(
  DESCRIPTOR = _DISPATCHNEWSEQALLOCREQ,
  __module__ = 'seq_alloc_dispatcher_pb2'
  # @@protoc_insertion_point(class_scope:Proto.DispatchNewSeqAllocReq)
  ))
_sym_db.RegisterMessage(DispatchNewSeqAllocReq)

DispatchNewSeqAllocRsp = _reflection.GeneratedProtocolMessageType('DispatchNewSeqAllocRsp', (_message.Message,), dict(
  DESCRIPTOR = _DISPATCHNEWSEQALLOCRSP,
  __module__ = 'seq_alloc_dispatcher_pb2'
  # @@protoc_insertion_point(class_scope:Proto.DispatchNewSeqAllocRsp)
  ))
_sym_db.RegisterMessage(DispatchNewSeqAllocRsp)


import abc
from grpc.beta import implementations as beta_implementations
from grpc.early_adopter import implementations as early_adopter_implementations
from grpc.framework.alpha import utilities as alpha_utilities
from grpc.framework.common import cardinality
from grpc.framework.interfaces.face import utilities as face_utilities
class EarlyAdopterRPCSeqAllocDispatcherServicer(object):
  """<fill me in later!>"""
  __metaclass__ = abc.ABCMeta
  @abc.abstractmethod
  def DispatchCurSeqAlloc(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def DispatchNewSeqAlloc(self, request, context):
    raise NotImplementedError()
class EarlyAdopterRPCSeqAllocDispatcherServer(object):
  """<fill me in later!>"""
  __metaclass__ = abc.ABCMeta
  @abc.abstractmethod
  def start(self):
    raise NotImplementedError()
  @abc.abstractmethod
  def stop(self):
    raise NotImplementedError()
class EarlyAdopterRPCSeqAllocDispatcherStub(object):
  """<fill me in later!>"""
  __metaclass__ = abc.ABCMeta
  @abc.abstractmethod
  def DispatchCurSeqAlloc(self, request):
    raise NotImplementedError()
  DispatchCurSeqAlloc.async = None
  @abc.abstractmethod
  def DispatchNewSeqAlloc(self, request):
    raise NotImplementedError()
  DispatchNewSeqAlloc.async = None
def early_adopter_create_RPCSeqAllocDispatcher_server(servicer, port, private_key=None, certificate_chain=None):
  import seq_alloc_dispatcher_pb2
  import seq_alloc_dispatcher_pb2
  import seq_alloc_dispatcher_pb2
  import seq_alloc_dispatcher_pb2
  method_service_descriptions = {
    "DispatchCurSeqAlloc": alpha_utilities.unary_unary_service_description(
      servicer.DispatchCurSeqAlloc,
      seq_alloc_dispatcher_pb2.DispatchCurSeqAllocReq.FromString,
      seq_alloc_dispatcher_pb2.DispatchCurSeqAllocRsp.SerializeToString,
    ),
    "DispatchNewSeqAlloc": alpha_utilities.unary_unary_service_description(
      servicer.DispatchNewSeqAlloc,
      seq_alloc_dispatcher_pb2.DispatchNewSeqAllocReq.FromString,
      seq_alloc_dispatcher_pb2.DispatchNewSeqAllocRsp.SerializeToString,
    ),
  }
  return early_adopter_implementations.server("Proto.RPCSeqAllocDispatcher", method_service_descriptions, port, private_key=private_key, certificate_chain=certificate_chain)
def early_adopter_create_RPCSeqAllocDispatcher_stub(host, port, metadata_transformer=None, secure=False, root_certificates=None, private_key=None, certificate_chain=None, server_host_override=None):
  import seq_alloc_dispatcher_pb2
  import seq_alloc_dispatcher_pb2
  import seq_alloc_dispatcher_pb2
  import seq_alloc_dispatcher_pb2
  method_invocation_descriptions = {
    "DispatchCurSeqAlloc": alpha_utilities.unary_unary_invocation_description(
      seq_alloc_dispatcher_pb2.DispatchCurSeqAllocReq.SerializeToString,
      seq_alloc_dispatcher_pb2.DispatchCurSeqAllocRsp.FromString,
    ),
    "DispatchNewSeqAlloc": alpha_utilities.unary_unary_invocation_description(
      seq_alloc_dispatcher_pb2.DispatchNewSeqAllocReq.SerializeToString,
      seq_alloc_dispatcher_pb2.DispatchNewSeqAllocRsp.FromString,
    ),
  }
  return early_adopter_implementations.stub("Proto.RPCSeqAllocDispatcher", method_invocation_descriptions, host, port, metadata_transformer=metadata_transformer, secure=secure, root_certificates=root_certificates, private_key=private_key, certificate_chain=certificate_chain, server_host_override=server_host_override)

class BetaRPCSeqAllocDispatcherServicer(object):
  """<fill me in later!>"""
  __metaclass__ = abc.ABCMeta
  @abc.abstractmethod
  def DispatchCurSeqAlloc(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def DispatchNewSeqAlloc(self, request, context):
    raise NotImplementedError()

class BetaRPCSeqAllocDispatcherStub(object):
  """The interface to which stubs will conform."""
  __metaclass__ = abc.ABCMeta
  @abc.abstractmethod
  def DispatchCurSeqAlloc(self, request, timeout):
    raise NotImplementedError()
  DispatchCurSeqAlloc.future = None
  @abc.abstractmethod
  def DispatchNewSeqAlloc(self, request, timeout):
    raise NotImplementedError()
  DispatchNewSeqAlloc.future = None

def beta_create_RPCSeqAllocDispatcher_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
  import seq_alloc_dispatcher_pb2
  import seq_alloc_dispatcher_pb2
  import seq_alloc_dispatcher_pb2
  import seq_alloc_dispatcher_pb2
  request_deserializers = {
    ('Proto.RPCSeqAllocDispatcher', 'DispatchCurSeqAlloc'): seq_alloc_dispatcher_pb2.DispatchCurSeqAllocReq.FromString,
    ('Proto.RPCSeqAllocDispatcher', 'DispatchNewSeqAlloc'): seq_alloc_dispatcher_pb2.DispatchNewSeqAllocReq.FromString,
  }
  response_serializers = {
    ('Proto.RPCSeqAllocDispatcher', 'DispatchCurSeqAlloc'): seq_alloc_dispatcher_pb2.DispatchCurSeqAllocRsp.SerializeToString,
    ('Proto.RPCSeqAllocDispatcher', 'DispatchNewSeqAlloc'): seq_alloc_dispatcher_pb2.DispatchNewSeqAllocRsp.SerializeToString,
  }
  method_implementations = {
    ('Proto.RPCSeqAllocDispatcher', 'DispatchCurSeqAlloc'): face_utilities.unary_unary_inline(servicer.DispatchCurSeqAlloc),
    ('Proto.RPCSeqAllocDispatcher', 'DispatchNewSeqAlloc'): face_utilities.unary_unary_inline(servicer.DispatchNewSeqAlloc),
  }
  server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
  return beta_implementations.server(method_implementations, options=server_options)

def beta_create_RPCSeqAllocDispatcher_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
  import seq_alloc_dispatcher_pb2
  import seq_alloc_dispatcher_pb2
  import seq_alloc_dispatcher_pb2
  import seq_alloc_dispatcher_pb2
  request_serializers = {
    ('Proto.RPCSeqAllocDispatcher', 'DispatchCurSeqAlloc'): seq_alloc_dispatcher_pb2.DispatchCurSeqAllocReq.SerializeToString,
    ('Proto.RPCSeqAllocDispatcher', 'DispatchNewSeqAlloc'): seq_alloc_dispatcher_pb2.DispatchNewSeqAllocReq.SerializeToString,
  }
  response_deserializers = {
    ('Proto.RPCSeqAllocDispatcher', 'DispatchCurSeqAlloc'): seq_alloc_dispatcher_pb2.DispatchCurSeqAllocRsp.FromString,
    ('Proto.RPCSeqAllocDispatcher', 'DispatchNewSeqAlloc'): seq_alloc_dispatcher_pb2.DispatchNewSeqAllocRsp.FromString,
  }
  cardinalities = {
    'DispatchCurSeqAlloc': cardinality.Cardinality.UNARY_UNARY,
    'DispatchNewSeqAlloc': cardinality.Cardinality.UNARY_UNARY,
  }
  stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
  return beta_implementations.dynamic_stub(channel, 'Proto.RPCSeqAllocDispatcher', cardinalities, options=stub_options)
# @@protoc_insertion_point(module_scope)
